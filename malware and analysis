
@ malware: is any software intentionally designed to cause damage to a computer.. server.. client.. or computer network.. 
 	malware is an executable or a binary that is malicious in nature..
		its used by attakers to perform a variety of malicious actions like rat | keylogger | ransomeware
	
  + in cybersecurity, the sandbox technology is an isolated test environment that looks.. 
	like end-user operating environments.. that safely execute the suspicious files.. 
		at sandboxing enviroment take snapshot of the vm so that it can restore..
			and use host-only network 

	note: while analyzing malware edit file type to <NONE>
									
 @malware analyse tools:
		- pestudio          									
		- remnux		- wireshark								
		- resource hacker	- file-alyzer								
		- process hacker	- procdot
		- autoruns		- fiddler
		- x64dbg		- ghidra
		- radare2/cutter	- cuckoo sandbox			
	
@malware analysis is that of analyzing a malware sample/binary and extracting as much as possible from it.. 
	the information helps to understand the scope of the functinality of malware.. 
	 	like how it communicates with the attacker | registry entries/keys.. 
	   		generating signatures that can be sued to detect future detection..
	   
	   
@type of malware analysis:
	
  	 + static analysis - analyzing malware without executing/running it. just exact as much metadata like string | pe headers
	 + dynamic analysis - process of executing malware and analyzing its functinality and behaviour. done in debugger.
	 + code analysis - process of reverse engineering assembly code (static + dynamic)
	 + dynamic analysis - monitor the malware after exection which includes process | registry |network monitoring 
	 
			trojan - it can destroy and exfiltrate data and also use for data spying..
			rat - allow attacker to remotely access and execute commad on the system..

	#static analysis-
	
		- identify the file type (target OS. architecture and format - dll/exe)
		- identify the hash of malware. using the hash to see if anyone has analyzed the malware
		- string give us an idea what the malware can do
		- packing &  obfuscation techniqures are used to prevent detection. unpacking/deobfuscating can reveal it
		- PE headers reveal a lot of information about malware functinality.
		
		- YARA is a tool aimed to helping malware researchers to identify and classify malware samples
		
		
		@ file type identification (HxD | Exeinfo PE | PeStudio | CFF Explorer)
			- 4d5a/mz indicates signatures of PE files
			- 5045    indicates pe headers begin
			
		@ generating hash (also called fingerprint) using md5 | sha-1 | sha-256
			- hashcal | hashmyfiles
			
		@ extracting strings using pestudio | peid | powershell (string command)
			- process of readable characters and words from malware
			- string are ascii/unicode format 
			- type of strings, we are looking for file name | url | ip address | registry keys
			
		@ packers & unpacking (upx | exeinfo pe)
			- packer is a tool that used to compress the content of malware and use packers to obfuscate the content

				
	#dynamic analysis-  

		@fakenet: tool that aids in the dynamic analysis. it simulates a network so that malware interacting with a 
			remote host continues to run allowing the analyst to observe the  malware network activity from within a safe environment.

		 @regshot: Registry and file system integrity monitor tool. 
			(https://sourceforge.net/projects/regshot/)

		@procmon: record the real-time system activity like process create.. register edited or added.. touch files.. network connection etc
			(https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)

		@procdot: visualize the ProcMon output..
			(https://cert.at/en/downloads/software/software-procdot)

		@autoruns:  check the code  signing certificate on the persistence locations like the Registry paths and scheduled tasks. 
			(https://docs.microsoft.com/enus/sysinternals/downloads/autoruns)

----------------------------------------------------------------------------------------

 		@ malware classification & identification
			- the content of the samples are changed by attackers to evade hash.. one line code is changed then hash changes..
			- hash based signature identification and detection is inaccurate or should not relied on

 
 		@ this is where YARA comes into play
	
			rule credential_rules
			{
			meta:
				description = "Simple Malware YARA Rule"

			strings:
				$fb = "https://www.facebook.com"
				$go = "https://google.com"
				$mz = {4D 5A}
				$post = "HTTP"

			condition:
			($fb or $go and $mz or $post)
			}

		#cmd -> yara32 -s -r credential_rules.yara <sample-malware>



